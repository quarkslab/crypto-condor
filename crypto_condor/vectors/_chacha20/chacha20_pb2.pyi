"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Chacha20Test(google.protobuf.message.Message):
    """A single ChaCha20 test vector."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    COMMENT_FIELD_NUMBER: builtins.int
    FLAGS_FIELD_NUMBER: builtins.int
    KEY_FIELD_NUMBER: builtins.int
    NONCE_FIELD_NUMBER: builtins.int
    PT_FIELD_NUMBER: builtins.int
    CT_FIELD_NUMBER: builtins.int
    AAD_FIELD_NUMBER: builtins.int
    TAG_FIELD_NUMBER: builtins.int
    COUNTER_FIELD_NUMBER: builtins.int
    id: builtins.int
    """The test ID, unique in its set of vectors."""
    type: builtins.str
    """The type of test. One of: valid, invalid, acceptable."""
    comment: builtins.str
    """A comment on the test."""
    key: builtins.bytes
    """The symmetric key."""
    nonce: builtins.bytes
    """The nonce."""
    pt: builtins.bytes
    """The plaintext."""
    ct: builtins.bytes
    """The ciphertext."""
    aad: builtins.bytes
    """The associated data."""
    tag: builtins.bytes
    """The MAC tag."""
    counter: builtins.int
    """(ChaCha20 only) A position to seek in the keystream before the operation. The
    position is in number of bytes.
    """
    @property
    def flags(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Flags that categorize this test."""

    def __init__(
        self,
        *,
        id: builtins.int = ...,
        type: builtins.str = ...,
        comment: builtins.str = ...,
        flags: collections.abc.Iterable[builtins.str] | None = ...,
        key: builtins.bytes = ...,
        nonce: builtins.bytes = ...,
        pt: builtins.bytes = ...,
        ct: builtins.bytes = ...,
        aad: builtins.bytes = ...,
        tag: builtins.bytes = ...,
        counter: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["aad", b"aad", "comment", b"comment", "counter", b"counter", "ct", b"ct", "flags", b"flags", "id", b"id", "key", b"key", "nonce", b"nonce", "pt", b"pt", "tag", b"tag", "type", b"type"]) -> None: ...

global___Chacha20Test = Chacha20Test

@typing.final
class Chacha20Vectors(google.protobuf.message.Message):
    """A set of ChaCha20 test vectors."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class NotesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    SOURCE_FIELD_NUMBER: builtins.int
    SOURCE_DESC_FIELD_NUMBER: builtins.int
    SOURCE_URL_FIELD_NUMBER: builtins.int
    COMPLIANCE_FIELD_NUMBER: builtins.int
    NOTES_FIELD_NUMBER: builtins.int
    TESTS_FIELD_NUMBER: builtins.int
    MODE_FIELD_NUMBER: builtins.int
    source: builtins.str
    """The source of the test vectors."""
    source_desc: builtins.str
    """Description of the source."""
    source_url: builtins.str
    """The URL of the source."""
    compliance: builtins.bool
    """Whether these are compliance test vectors or not."""
    mode: builtins.str
    """The mode: either CHACHA20 or CHACHA20-POLY1305."""
    @property
    def notes(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
        """A dictionary of test flags and their description."""

    @property
    def tests(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Chacha20Test]:
        """The test vectors."""

    def __init__(
        self,
        *,
        source: builtins.str = ...,
        source_desc: builtins.str = ...,
        source_url: builtins.str = ...,
        compliance: builtins.bool = ...,
        notes: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        tests: collections.abc.Iterable[global___Chacha20Test] | None = ...,
        mode: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["compliance", b"compliance", "mode", b"mode", "notes", b"notes", "source", b"source", "source_desc", b"source_desc", "source_url", b"source_url", "tests", b"tests"]) -> None: ...

global___Chacha20Vectors = Chacha20Vectors
