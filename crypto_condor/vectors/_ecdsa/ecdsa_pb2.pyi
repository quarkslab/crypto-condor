"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class EcdsaSigVerTest(google.protobuf.message.Message):
    """A single test for ECDSA signature verification. It requires all three values (msg,
    sig. pubkey).
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    COMMENT_FIELD_NUMBER: builtins.int
    FLAGS_FIELD_NUMBER: builtins.int
    MSG_FIELD_NUMBER: builtins.int
    SIG_FIELD_NUMBER: builtins.int
    PUBKEY_FIELD_NUMBER: builtins.int
    id: builtins.int
    """The test ID, unique in its set of vectors."""
    type: builtins.str
    """The type of test. One of: valid, invalid, acceptable."""
    comment: builtins.str
    """A comment on the test."""
    msg: builtins.bytes
    """The message that was signed."""
    sig: builtins.bytes
    """The signature ASN.1 encoded as Dss-Sig-Value from RFC 3279."""
    pubkey: builtins.bytes
    """The public key as an encoded uncompressed point."""
    @property
    def flags(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Flags that categorize this test."""

    def __init__(
        self,
        *,
        id: builtins.int = ...,
        type: builtins.str = ...,
        comment: builtins.str = ...,
        flags: collections.abc.Iterable[builtins.str] | None = ...,
        msg: builtins.bytes = ...,
        sig: builtins.bytes = ...,
        pubkey: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["comment", b"comment", "flags", b"flags", "id", b"id", "msg", b"msg", "pubkey", b"pubkey", "sig", b"sig", "type", b"type"]) -> None: ...

global___EcdsaSigVerTest = EcdsaSigVerTest

@typing.final
class EcdsaSigVerVectors(google.protobuf.message.Message):
    """Test vectors for ECDSA signature verification, grouped by elliptic curve and hash
    function.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class NotesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    SOURCE_FIELD_NUMBER: builtins.int
    SOURCE_DESC_FIELD_NUMBER: builtins.int
    SOURCE_URL_FIELD_NUMBER: builtins.int
    COMPLIANCE_FIELD_NUMBER: builtins.int
    NOTES_FIELD_NUMBER: builtins.int
    CURVE_FIELD_NUMBER: builtins.int
    HASH_FIELD_NUMBER: builtins.int
    TESTS_FIELD_NUMBER: builtins.int
    source: builtins.str
    """The source of the test vectors."""
    source_desc: builtins.str
    """Description of the source."""
    source_url: builtins.str
    """The URL of the source."""
    compliance: builtins.bool
    """Whether these are compliance test vectors or not."""
    curve: builtins.str
    """The elliptic curve."""
    hash: builtins.str
    """The hash function."""
    @property
    def notes(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
        """A dictionary of test flags and their description."""

    @property
    def tests(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___EcdsaSigVerTest]:
        """The test vectors."""

    def __init__(
        self,
        *,
        source: builtins.str = ...,
        source_desc: builtins.str = ...,
        source_url: builtins.str = ...,
        compliance: builtins.bool = ...,
        notes: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        curve: builtins.str = ...,
        hash: builtins.str = ...,
        tests: collections.abc.Iterable[global___EcdsaSigVerTest] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["compliance", b"compliance", "curve", b"curve", "hash", b"hash", "notes", b"notes", "source", b"source", "source_desc", b"source_desc", "source_url", b"source_url", "tests", b"tests"]) -> None: ...

global___EcdsaSigVerVectors = EcdsaSigVerVectors

@typing.final
class EcdsaSigGenTest(google.protobuf.message.Message):
    """A single test for ECDSA signature generation. It requires both values (msg, d)."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    COMMENT_FIELD_NUMBER: builtins.int
    FLAGS_FIELD_NUMBER: builtins.int
    MSG_FIELD_NUMBER: builtins.int
    D_FIELD_NUMBER: builtins.int
    id: builtins.int
    """The test ID, unique in its set of vectors."""
    type: builtins.str
    """The type of test. One of: valid, invalid, acceptable."""
    comment: builtins.str
    """A comment on the test."""
    msg: builtins.bytes
    """The message to sign."""
    d: builtins.bytes
    """The secret value as bytes."""
    @property
    def flags(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Flags that categorize this test."""

    def __init__(
        self,
        *,
        id: builtins.int = ...,
        type: builtins.str = ...,
        comment: builtins.str = ...,
        flags: collections.abc.Iterable[builtins.str] | None = ...,
        msg: builtins.bytes = ...,
        d: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["comment", b"comment", "d", b"d", "flags", b"flags", "id", b"id", "msg", b"msg", "type", b"type"]) -> None: ...

global___EcdsaSigGenTest = EcdsaSigGenTest

@typing.final
class EcdsaSigGenVectors(google.protobuf.message.Message):
    """Test vectors for ECDSA signature generation, grouped by elliptic curve and hash
    function.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class NotesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    SOURCE_FIELD_NUMBER: builtins.int
    SOURCE_DESC_FIELD_NUMBER: builtins.int
    SOURCE_URL_FIELD_NUMBER: builtins.int
    COMPLIANCE_FIELD_NUMBER: builtins.int
    NOTES_FIELD_NUMBER: builtins.int
    CURVE_FIELD_NUMBER: builtins.int
    HASH_FIELD_NUMBER: builtins.int
    TESTS_FIELD_NUMBER: builtins.int
    source: builtins.str
    """The source of the test vectors."""
    source_desc: builtins.str
    """Description of the source."""
    source_url: builtins.str
    """The URL of the source."""
    compliance: builtins.bool
    """Whether these are compliance test vectors or not."""
    curve: builtins.str
    """The elliptic curve."""
    hash: builtins.str
    """The hash function."""
    @property
    def notes(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
        """A dictionary of test flags and their description."""

    @property
    def tests(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___EcdsaSigGenTest]:
        """The test vectors."""

    def __init__(
        self,
        *,
        source: builtins.str = ...,
        source_desc: builtins.str = ...,
        source_url: builtins.str = ...,
        compliance: builtins.bool = ...,
        notes: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        curve: builtins.str = ...,
        hash: builtins.str = ...,
        tests: collections.abc.Iterable[global___EcdsaSigGenTest] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["compliance", b"compliance", "curve", b"curve", "hash", b"hash", "notes", b"notes", "source", b"source", "source_desc", b"source_desc", "source_url", b"source_url", "tests", b"tests"]) -> None: ...

global___EcdsaSigGenVectors = EcdsaSigGenVectors
